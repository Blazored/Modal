@inject IModalService ModalService

@if (ShowForm)
{
    <div class="simple-form">

        <div class="form-group">
            <label for="first-name">First Name</label>
            <input @bind="FirstName" type="text" class="form-control" id="first-name" placeholder="Enter First Name" />
        </div>

        <div class="form-group">
            <label for="last-name">Last Name</label>
            <input @bind="LastName" type="text" class="form-control" id="last-name" placeholder="Enter Last Name" />
        </div>

        <button @onclick="SubmitForm" class="btn btn-primary">Submit</button>
        <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
    </div>
}
else
{
    <div class="alert alert-success" role="alert">
        Thanks @FirstName @LastName, form (Id: @FormId) submitted successfully.<br />
        <button class="btn btn-primary" @onclick="Done">Done</button>
    </div>
}

@code {

    [CascadingParameter] ModalParameters Parameters { get; set; }
    [CascadingParameter] BlazoredModal BlazoredModal { get; set; }

    public event Action FormSubmitted;

    public string FirstName { get; set; }
    public string LastName { get; set; }

    bool ShowForm { get; set; } = true;
    int FormId { get; set; }

    protected override void OnInitialized()
    {
        FormId = Parameters.TryGet<int>("FormId");
        BlazoredModal.SetTitle("Sheep");
    }


    void SubmitForm()
    {
        ShowForm = false;
        this.FormSubmitted?.Invoke();
    }

    void Done()
    {
        ModalService.Close(ModalResult.Ok($"Form ID {FormId} was submitted successfully."));
    }

    void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }

}
